type Trading_Callback {
  id: ID!
  target: String!
  resut: Boolean!
}

type Trading_CancelOpen {
  id: ID!
  orderId: BigInt!
}

type Trading_Close {
  id: ID!
  orderId: BigInt!
  closePrice: BigInt!
  _closeMargin: BigInt!
  fundingFee: BigInt!
  rolloverFee: BigInt!
  closeFee: BigInt!
  afterFee: BigInt!
  s: BigInt!
}

type Trading_ExecRequestClose {
  id: ID!
  orderId: BigInt!
  index: BigInt!
  status: Boolean!
}

type Trading_ExecRequestOpen {
  id: ID!
  orderId: BigInt!
  status: Boolean!
}

type Trading_Initialized {
  id: ID!
  version: BigInt!
}

type Trading_Open {
  id: ID!
  orderId: BigInt!
  t_0_0: String!
  t_0_1: BigInt!
  t_0_2: BigInt!
  t_0_3: Boolean!
  t_0_4: BigInt!
  t_0_5: BigInt!
  t_0_6: BigInt!
  t_1: BigInt!
  t_2: BigInt!
  fee: BigInt!
}

type Trading_OwnershipTransferStarted {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type Trading_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type Trading_RequestClose {
  id: ID!
  orderId: BigInt!
  index: BigInt!
  _closeMargin: BigInt!
  requstTime: BigInt!
}

type Trading_RequestOpen {
  id: ID!
  orderId: BigInt!
  _request_0: BigInt!
  _request_1_0: String!
  _request_1_1: BigInt!
  _request_1_2: BigInt!
  _request_1_3: Boolean!
  _request_1_4: BigInt!
  _request_1_5: BigInt!
  _request_1_6: BigInt!
  _request_2: String!
  _request_3: BigInt!
  _request_4: BigInt!
  _request_5: BigInt!
}

type Trading_SetContract {
  id: ID!
  _tradingStorage: String!
  _usdt: String!
}

type Trading_SetNativeFeeForKeeper {
  id: ID!
  _forOpen: BigInt!
  _forClose: BigInt!
  _forCallback: BigInt!
  _gasLimit: BigInt!
}

type Trading_SetParams {
  id: ID!
  _liquidationP: BigInt!
  _spreadReductionP: BigInt!
  _maxMarketTradeOpenTime: BigInt!
  _tradeSwitch: BigInt!
}

type Trading_SetReserve {
  id: ID!
  _receiver: String!
  _rate: BigInt!
}

type Trading_TradeClosed {
  id: ID!
  orderId: BigInt!
}

type Trading_UpdateMargin {
  id: ID!
  orderId: BigInt!
  amount: BigInt!
  isAdd: Boolean!
  margin: BigInt!
  leverage: BigInt!
}

type Trading_UpdateOpenRequest {
  id: ID!
  orderId: BigInt!
  limitPrice: BigInt!
  tp: BigInt!
  sl: BigInt!
}

type Trading_UpdateTPAndSL {
  id: ID!
  orderId: BigInt!
  tp: BigInt!
  sl: BigInt!
}

type Dice_Dice_Outcome_Event {
  id: ID!
  playerAddress: String!
  wager: BigInt!
  payout: BigInt!
  tokenAddress: String!
  multiplier: BigInt!
  isOver: Boolean!
  diceOutcomes: [BigInt!]!
  payouts: [BigInt!]!
  numGames: BigInt!
  sequenceNumber: BigInt!
}

type Dice_Dice_Play_Event {
  id: ID!
  playerAddress: String!
  wager: BigInt!
  multiplier: BigInt!
  tokenAddress: String!
  isOver: Boolean!
  numBets: BigInt!
  stopGain: BigInt!
  stopLoss: BigInt!
  vRFFee: BigInt!
}

type Dice_Dice_Refund_Event {
  id: ID!
  player: String!
  wager: BigInt!
  tokenAddress: String!
}

type CoinFlip_CoinFlip_Outcome_Event {
  id: ID!
  playerAddress: String!
  wager: BigInt!
  payout: BigInt!
  tokenAddress: String!
  coinOutcomes: [BigInt!]!
  payouts: [BigInt!]!
  numGames: BigInt!
  sequenceNumber: BigInt!
}

type CoinFlip_CoinFlip_Play_Event {
  id: ID!
  playerAddress: String!
  wager: BigInt!
  tokenAddress: String!
  isHeads: Boolean!
  numBets: BigInt!
  stopGain: BigInt!
  stopLoss: BigInt!
  vRFFee: BigInt!
}

type CoinFlip_CoinFlip_Refund_Event {
  id: ID!
  player: String!
  wager: BigInt!
  tokenAddress: String!
}

type BankrollAndStaking_BankRoll_Fee_Info {
  id: ID!
  receiver: String!
  rate: BigInt!
}

type BankrollAndStaking_BankRoll_Game_State_Changed {
  id: ID!
  gameAddress: String!
  isValid: Boolean!
}

type BankrollAndStaking_BankRoll_Max_Payout_Changed {
  id: ID!
  payout: BigInt!
}

type BankrollAndStaking_BankRoll_Stake {
  id: ID!
  user: String!
  token: String!
  amount: BigInt!
  shares: BigInt!
  userTotalSheres: BigInt!
  tokenShareTotal: BigInt!
  totalPool: BigInt!
}

type BankrollAndStaking_BankRoll_Withdraw {
  id: ID!
  user: String!
  token: String!
  amount: BigInt!
  userAmount: BigInt!
  userTotalSheres: BigInt!
  tokenShareTotal: BigInt!
  totalPool: BigInt!
}

type BankrollAndStaking_Bankroll_Token_State_Changed {
  id: ID!
  tokenAddress: String!
  isValid: Boolean!
}

type BankrollAndStaking_Initialized {
  id: ID!
  version: BigInt!
}

type BankrollAndStaking_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type TinderTrading_Callback {
  id: ID!
  target: String!
  resut: Boolean!
}

type TinderTrading_Close {
  id: ID!
  orderId: BigInt!
  closePrice: BigInt!
  _closeMargin: BigInt!
  fundingFee: BigInt!
  rolloverFee: BigInt!
  closeFee: BigInt!
  afterFee: BigInt!
  s: BigInt!
}

type TinderTrading_Initialized {
  id: ID!
  version: BigInt!
}

type TinderTrading_Open {
  id: ID!
  orderId: BigInt!
  t_0_0: String!
  t_0_1: BigInt!
  t_0_2: BigInt!
  t_0_3: Boolean!
  t_0_4: BigInt!
  t_0_5: BigInt!
  t_0_6: BigInt!
  t_1: BigInt!
  t_2: BigInt!
  fee: BigInt!
}

type TinderTrading_OwnershipTransferStarted {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type TinderTrading_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type TinderTrading_Paused {
  id: ID!
  account: String!
}

type TinderTrading_SetFeeHelper {
  id: ID!
  _feeHelper: String!
}

type TinderTrading_SetOracle {
  id: ID!
  _oracle: String!
}

type TinderTrading_SetPairInfo {
  id: ID!
  _pairInfo: String!
}

type TinderTrading_SetParams {
  id: ID!
  _liquidationP: BigInt!
  _spreadReductionP: BigInt!
  _callbackGasLimit: BigInt!
}

type TinderTrading_SetReserve {
  id: ID!
  _receiver: String!
  _rate: BigInt!
}

type TinderTrading_SetStandardToken {
  id: ID!
  _standardToken: String!
}

type TinderTrading_SetVault {
  id: ID!
  _vault: String!
}

type TinderTrading_Unpaused {
  id: ID!
  account: String!
}

type TinderTrading_UpdateKeeper {
  id: ID!
  _keeper: String!
  _flag: Boolean!
}

type RockPaperScissors_RockPaperScissors_Outcome_Event {
  id: ID!
  playerAddress: String!
  wager: BigInt!
  payout: BigInt!
  tokenAddress: String!
  outcomes: [BigInt!]!
  randomActions: [BigInt!]!
  payouts: [BigInt!]!
  numGames: BigInt!
  sequenceNumber: BigInt!
}

# type RockPaperScissors_RockPaperScissors_Play_Event {
#   id: ID!
#   playerAddress: String!
#   wager: BigInt!
#   tokenAddress: String!
#   action: BigInt!
#   numBets: BigInt!
#   stopGain: BigInt!
#   stopLoss: BigInt!
#   vRFFee: BigInt!
# }

type RockPaperScissors_RockPaperScissors_Refund_Event {
  id: ID!
  player: String!
  wager: BigInt!
  tokenAddress: String!
}

type Slots_Slots_Outcome_Event {
  id: ID!
  playerAddress: String!
  wager: BigInt!
  payout: BigInt!
  tokenAddress: String!
  slotIDs: [BigInt!]!
  multipliers: [BigInt!]!
  payouts: [BigInt!]!
  numGames: BigInt!
  sequenceNumber: BigInt!
}

type Slots_Slots_Play_Event {
  id: ID!
  playerAddress: String!
  wager: BigInt!
  tokenAddress: String!
  numBets: BigInt!
  stopGain: BigInt!
  stopLoss: BigInt!
  vRFFee: BigInt!
}

type Slots_Slots_Refund_Event {
  id: ID!
  player: String!
  wager: BigInt!
  tokenAddress: String!
}



type Mines_Mines_Fee_Event {
  id: ID!
  playerAddress: String!
  vRFFee: BigInt!
}

type Mines_Mines_Play_Event {
  id: ID!
  playerAddress: String!
  wager: BigInt!
  tokenAddress: String!
  numMines: BigInt!
  isCashout: Boolean!
  vRFFee: BigInt!
}

type Mines_Mines_Refund_Event {
  id: ID!
  player: String!
  wager: BigInt!
  tokenAddress: String!
}


type Plinko_Plinko_Outcome_Event {
  id: ID!
  playerAddress: String!
  wager: BigInt!
  payout: BigInt!
  tokenAddress: String!
  paths: [BigInt!]!
  numRows: BigInt!
  risk: BigInt!
  payouts: [BigInt!]!
  numGames: BigInt!
  sequenceNumber: BigInt!
}

type Plinko_Plinko_Play_Event {
  id: ID!
  playerAddress: String!
  wager: BigInt!
  tokenAddress: String!
  numRows: BigInt!
  risk: BigInt!
  numBets: BigInt!
  stopGain: BigInt!
  stopLoss: BigInt!
  vRFFee: BigInt!
}

type Plinko_Plinko_Refund_Event {
  id: ID!
  player: String!
  wager: BigInt!
  tokenAddress: String!
}





